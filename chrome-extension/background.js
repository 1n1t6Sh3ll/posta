/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 35);
/******/ })
/************************************************************************/
/******/ ({

/***/ 35:
/***/ (function(module, exports) {

const handlers = new Set();
chrome.browserAction.onClicked.addListener(() => {
  chrome.runtime.openOptionsPage();
});

$$$SubScribeToPosta = handler => {
  console.log("new subscription from options page");
  handlers.add(handler);
};

var timer;

function refreshOptionsPage() {
  clearTimeout(timer);
  timer = setTimeout(() => {
    try {
      Array.from(handlers).forEach(h => h());
    } catch (error) {
      console.log(error);
    }
  }, 100);
}

class Bucket {
  constructor(ItemConstructor) {
    this.ItemConstructor = ItemConstructor;
    this._bucket = {};
  }

  add(id) {
    const {
      ItemConstructor
    } = this;
    if (!this._bucket[id]) this._bucket[id] = new ItemConstructor(id);
    return this._bucket[id];
  }

  set(id, item) {
    this._bucket[id] = item;
    return this._bucket[id];
  }

  get(id) {
    return this._bucket[id] || {
      get: () => ({}),
      set: () => ({
        get: () => {}
      })
    };
  }

  list(decay = 10 * 1000) {
    return Object.keys(this._bucket).map(k => this._bucket[k]); // .filter(i => !decay || !i.isDecayed(decay))
  }

}

class Item {
  constructor(id) {
    this.attributes = {};
    this.id = id;
    this.touch(true);
  }

  touch(modify) {
    this._json = modify ? undefined : this._json;
    this.lastSeen = Date.now();
    if (modify) refreshOptionsPage();
  }

  set(key, value) {
    this.touch(this.attributes[key] !== value);
    this.attributes[key] = value;
    return this;
  }

  isDecayed(decay) {
    return false;
    if (decay && this.lastSeen + decay < Date.now()) return true;
  }

  json() {
    this._json = this._json || this.get();
    return this._json;
  }

  get() {
    return {
      id: this.id,
      ...this.attributes
    };
  }

}

class TabFrame extends Item {
  constructor(tabFrameId) {
    super(tabFrameId);
    this.children = new Bucket(TabFrame);
    this.set("listeners", []);
  }

  addChild(child) {
    return this.children.set(child.id, child);
  }

  get windowId() {
    return windowsByTabAndFrameId.get(this.id).id;
  }

  get messages() {
    return messageByTabFrameId.get(this.id).messages || {
      messages: [],
      sent: 0,
      count: 0,
      received: 0
    };
  }

  get() {
    const {
      children,
      id
    } = this;
    return { ...super.get(),
      ...windowsByTabAndFrameId.get(id).get(),
      children: children.list()
    };
  }

}

class MessagesBucket extends Item {
  constructor(windowId) {
    super(windowId);
    this.messages = {
      messages: [],
      sent: 0,
      count: 0,
      received: 0
    };
  }

  addMessage(messageId, counter) {
    if (this.messages.messages.indexOf(messageId) !== -1) return;
    this.messages[counter]++;
    this.messages.count++;
    this.messages.messages.unshift(messageId);
    this.messages.messages = this.messages.messages.slice(0, 100); //to avoid denial of service

    this.messages.messages = Array.from(this.messages.messages);
    this.touch(true);
    refreshOptionsPage();
  }

  get() {
    return { ...this.messages,
      messages: this.messages.map(m => messagesByMessageId.get(m).get())
    };
  }

}

windowsByTabAndFrameId = new Bucket(TabFrame);
messagesByMessageId = new Bucket(Item);
messageByTabFrameId = new Bucket(MessagesBucket);
tabsFrames = new Bucket(TabFrame);

const receivedMessage = ({
  messageId,
  data,
  origin
}, tabId, frameId) => {
  let tabWindowId = `${tabId}::${frameId}`;
  messageByTabFrameId.add(tabWindowId).addMessage(messageId, "received");
  messagesByMessageId.add(messageId).set("receiver", tabWindowId).set("origin", origin).set("data", data);
};

const accountForMessage = ({
  messageId
}, tabId, frameId) => {
  let tabWindowId = `${tabId}::${frameId}`;
  messageByTabFrameId.add(tabWindowId).addMessage(messageId, "sent");
  messagesByMessageId.add(messageId).set("sender", tabWindowId);
};

const listeners = (message, tabId, frameId) => {
  const {
    listeners,
    windowId
  } = message;
  windowsByTabAndFrameId.add(`${tabId}::${frameId}`).set("listeners", listeners).set("windowId", windowId);
};

const topicHandlers = {
  "received-message": receivedMessage,
  "account-for-message": accountForMessage,
  listeners,
  "account-for-path": (message, tabId, frameId) => {
    let tabWindowId = `${tabId}::${frameId}`;
    let {
      path
    } = message;
    windowsByTabAndFrameId.add(tabWindowId).set("path", path);
  }
};

const processIncomingMessage = (message, tabId, frameId) => {
  let {
    topic
  } = message;
  if (!topicHandlers[topic]) return console.log(`TODO: handel ${topic} from ${tabId}:${frameId}`);
  topicHandlers[topic](message, tabId, frameId);
};

chrome.runtime.onMessage.addListener((message, sender, response) => {
  const {
    frameId,
    tab: {
      id
    }
  } = sender;
  if (!message) console.trace("empty message");

  try {
    processIncomingMessage(message, id, frameId);
  } catch (error) {
    console.log(error);
  }
});

const updateTabs = () => {
  chrome.tabs.query({}, allTabs => {
    let targetTabs = allTabs.filter(({
      url
    }) => !url.startsWith("chrome"));
    Promise.all(targetTabs.map(({
      id: tabId
    }) => new Promise((resolve, reject) => {
      chrome.webNavigation.getAllFrames({
        tabId
      }, frames => resolve({
        tabId,
        frames
      }));
    }))).then(updatedTabs => {
      tabsFrames = new Bucket(TabFrame);
      updatedTabs.forEach(({
        tabId,
        frames
      }) => {
        let topFrameIndex = frames.findIndex(({
          parentFrameId
        }) => parentFrameId === -1);
        var [{
          frameId,
          url
        }] = frames.splice(topFrameIndex, 1);
        let tabFrameId = `${tabId}::${frameId}`;
        var top = new TabFrame(tabFrameId);
        top.set("locationHref", url);
        windowsByTabAndFrameId.set(tabFrameId, top);
        tabsFrames.set(tabFrameId, top);
        frames.forEach(frame => {
          const {
            frameId,
            parentFrameId,
            url
          } = frame;
          let tabFrameId = `${tabId}::${frameId}`;
          let parentTabFrameId = `${tabId}::${parentFrameId}`;
          let windowFrame = windowsByTabAndFrameId.add(tabFrameId).set("locationHref", url);
          let parentWindowFrame = windowsByTabAndFrameId.add(parentTabFrameId);
          parentWindowFrame.addChild(windowFrame);
        });
      });
    });
  });
};

chrome.webNavigation.onDOMContentLoaded.addListener(updateTabs);
chrome.webNavigation.onCommitted.addListener(updateTabs);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4dGVuc2lvbi9iYWNrZ3JvdW5kLmpzIl0sIm5hbWVzIjpbImhhbmRsZXJzIiwiU2V0IiwiY2hyb21lIiwiYnJvd3NlckFjdGlvbiIsIm9uQ2xpY2tlZCIsImFkZExpc3RlbmVyIiwicnVudGltZSIsIm9wZW5PcHRpb25zUGFnZSIsIiQkJFN1YlNjcmliZVRvUG9zdGEiLCJoYW5kbGVyIiwiY29uc29sZSIsImxvZyIsImFkZCIsInRpbWVyIiwicmVmcmVzaE9wdGlvbnNQYWdlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJoIiwiZXJyb3IiLCJCdWNrZXQiLCJjb25zdHJ1Y3RvciIsIkl0ZW1Db25zdHJ1Y3RvciIsIl9idWNrZXQiLCJpZCIsInNldCIsIml0ZW0iLCJnZXQiLCJsaXN0IiwiZGVjYXkiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiayIsIkl0ZW0iLCJhdHRyaWJ1dGVzIiwidG91Y2giLCJtb2RpZnkiLCJfanNvbiIsInVuZGVmaW5lZCIsImxhc3RTZWVuIiwiRGF0ZSIsIm5vdyIsImtleSIsInZhbHVlIiwiaXNEZWNheWVkIiwianNvbiIsIlRhYkZyYW1lIiwidGFiRnJhbWVJZCIsImNoaWxkcmVuIiwiYWRkQ2hpbGQiLCJjaGlsZCIsIndpbmRvd0lkIiwid2luZG93c0J5VGFiQW5kRnJhbWVJZCIsIm1lc3NhZ2VzIiwibWVzc2FnZUJ5VGFiRnJhbWVJZCIsInNlbnQiLCJjb3VudCIsInJlY2VpdmVkIiwiTWVzc2FnZXNCdWNrZXQiLCJhZGRNZXNzYWdlIiwibWVzc2FnZUlkIiwiY291bnRlciIsImluZGV4T2YiLCJ1bnNoaWZ0Iiwic2xpY2UiLCJtIiwibWVzc2FnZXNCeU1lc3NhZ2VJZCIsInRhYnNGcmFtZXMiLCJyZWNlaXZlZE1lc3NhZ2UiLCJkYXRhIiwib3JpZ2luIiwidGFiSWQiLCJmcmFtZUlkIiwidGFiV2luZG93SWQiLCJhY2NvdW50Rm9yTWVzc2FnZSIsImxpc3RlbmVycyIsIm1lc3NhZ2UiLCJ0b3BpY0hhbmRsZXJzIiwicGF0aCIsInByb2Nlc3NJbmNvbWluZ01lc3NhZ2UiLCJ0b3BpYyIsIm9uTWVzc2FnZSIsInNlbmRlciIsInJlc3BvbnNlIiwidGFiIiwidHJhY2UiLCJ1cGRhdGVUYWJzIiwidGFicyIsInF1ZXJ5IiwiYWxsVGFicyIsInRhcmdldFRhYnMiLCJmaWx0ZXIiLCJ1cmwiLCJzdGFydHNXaXRoIiwiUHJvbWlzZSIsImFsbCIsInJlc29sdmUiLCJyZWplY3QiLCJ3ZWJOYXZpZ2F0aW9uIiwiZ2V0QWxsRnJhbWVzIiwiZnJhbWVzIiwidGhlbiIsInVwZGF0ZWRUYWJzIiwidG9wRnJhbWVJbmRleCIsImZpbmRJbmRleCIsInBhcmVudEZyYW1lSWQiLCJzcGxpY2UiLCJ0b3AiLCJmcmFtZSIsInBhcmVudFRhYkZyYW1lSWQiLCJ3aW5kb3dGcmFtZSIsInBhcmVudFdpbmRvd0ZyYW1lIiwib25ET01Db250ZW50TG9hZGVkIiwib25Db21taXR0ZWQiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7O0FDbEZBLE1BQU1BLFFBQVEsR0FBRyxJQUFJQyxHQUFKLEVBQWpCO0FBRUFDLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkMsU0FBckIsQ0FBK0JDLFdBQS9CLENBQTJDLE1BQUk7QUFDM0NILFFBQU0sQ0FBQ0ksT0FBUCxDQUFlQyxlQUFmO0FBQ0gsQ0FGRDs7QUFJQUMsbUJBQW1CLEdBQUlDLE9BQUQsSUFBYTtBQUMvQkMsU0FBTyxDQUFDQyxHQUFSLENBQVksb0NBQVo7QUFDQVgsVUFBUSxDQUFDWSxHQUFULENBQWFILE9BQWI7QUFDSCxDQUhEOztBQUtBLElBQUlJLEtBQUo7O0FBRUEsU0FBU0Msa0JBQVQsR0FBOEI7QUFDMUJDLGNBQVksQ0FBQ0YsS0FBRCxDQUFaO0FBQ0FBLE9BQUssR0FBR0csVUFBVSxDQUFDLE1BQUk7QUFDbkIsUUFBSTtBQUNBQyxXQUFLLENBQUNDLElBQU4sQ0FBV2xCLFFBQVgsRUFBcUJtQixPQUFyQixDQUE2QkMsQ0FBQyxJQUFJQSxDQUFDLEVBQW5DO0FBQ0gsS0FGRCxDQUVFLE9BQU9DLEtBQVAsRUFBYztBQUNaWCxhQUFPLENBQUNDLEdBQVIsQ0FBWVUsS0FBWjtBQUNIO0FBQ0osR0FOaUIsRUFNaEIsR0FOZ0IsQ0FBbEI7QUFRSDs7QUFHRCxNQUFNQyxNQUFOLENBQWE7QUFDVEMsYUFBVyxDQUFDQyxlQUFELEVBQWtCO0FBQ3pCLFNBQUtBLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDSDs7QUFDRGIsS0FBRyxDQUFDYyxFQUFELEVBQUs7QUFDSixVQUFNO0FBQUVGO0FBQUYsUUFBc0IsSUFBNUI7QUFDQSxRQUFJLENBQUMsS0FBS0MsT0FBTCxDQUFhQyxFQUFiLENBQUwsRUFBdUIsS0FBS0QsT0FBTCxDQUFhQyxFQUFiLElBQW1CLElBQUlGLGVBQUosQ0FBb0JFLEVBQXBCLENBQW5CO0FBQ3ZCLFdBQU8sS0FBS0QsT0FBTCxDQUFhQyxFQUFiLENBQVA7QUFDSDs7QUFDREMsS0FBRyxDQUFDRCxFQUFELEVBQUtFLElBQUwsRUFBVTtBQUNULFNBQUtILE9BQUwsQ0FBYUMsRUFBYixJQUFtQkUsSUFBbkI7QUFDQSxXQUFPLEtBQUtILE9BQUwsQ0FBYUMsRUFBYixDQUFQO0FBQ0g7O0FBQ0RHLEtBQUcsQ0FBQ0gsRUFBRCxFQUFLO0FBQ0osV0FBTyxLQUFLRCxPQUFMLENBQWFDLEVBQWIsS0FBb0I7QUFDdkJHLFNBQUcsRUFBRSxPQUFPLEVBQVAsQ0FEa0I7QUFFdkJGLFNBQUcsRUFBRSxPQUFPO0FBQUVFLFdBQUcsRUFBRSxNQUFNLENBQUc7QUFBaEIsT0FBUDtBQUZrQixLQUEzQjtBQUlIOztBQUNEQyxNQUFJLENBQUNDLEtBQUssR0FBRyxLQUFLLElBQWQsRUFBb0I7QUFDcEIsV0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS1IsT0FBakIsRUFBMEJTLEdBQTFCLENBQThCQyxDQUFDLElBQUksS0FBS1YsT0FBTCxDQUFhVSxDQUFiLENBQW5DLENBQVAsQ0FEb0IsQ0FFcEI7QUFDSDs7QUF2QlE7O0FBMEJiLE1BQU1DLElBQU4sQ0FBVztBQUNQYixhQUFXLENBQUNHLEVBQUQsRUFBSztBQUNaLFNBQUtXLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxTQUFLWCxFQUFMLEdBQVVBLEVBQVY7QUFDQSxTQUFLWSxLQUFMLENBQVcsSUFBWDtBQUNIOztBQUNEQSxPQUFLLENBQUNDLE1BQUQsRUFBUztBQUNWLFNBQUtDLEtBQUwsR0FBYUQsTUFBTSxHQUFHRSxTQUFILEdBQWUsS0FBS0QsS0FBdkM7QUFDQSxTQUFLRSxRQUFMLEdBQWdCQyxJQUFJLENBQUNDLEdBQUwsRUFBaEI7QUFDQSxRQUFJTCxNQUFKLEVBQVl6QixrQkFBa0I7QUFDakM7O0FBQ0RhLEtBQUcsQ0FBQ2tCLEdBQUQsRUFBTUMsS0FBTixFQUFhO0FBQ1osU0FBS1IsS0FBTCxDQUFXLEtBQUtELFVBQUwsQ0FBZ0JRLEdBQWhCLE1BQXlCQyxLQUFwQztBQUNBLFNBQUtULFVBQUwsQ0FBZ0JRLEdBQWhCLElBQXVCQyxLQUF2QjtBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUVEQyxXQUFTLENBQUNoQixLQUFELEVBQVE7QUFDYixXQUFPLEtBQVA7QUFDQSxRQUFJQSxLQUFLLElBQU0sS0FBS1csUUFBTCxHQUFnQlgsS0FBakIsR0FBMEJZLElBQUksQ0FBQ0MsR0FBTCxFQUF4QyxFQUFxRCxPQUFPLElBQVA7QUFDeEQ7O0FBRURJLE1BQUksR0FBRztBQUNILFNBQUtSLEtBQUwsR0FBYSxLQUFLQSxLQUFMLElBQWMsS0FBS1gsR0FBTCxFQUEzQjtBQUNBLFdBQU8sS0FBS1csS0FBWjtBQUNIOztBQUVEWCxLQUFHLEdBQUc7QUFDRixXQUFPO0FBQ0hILFFBQUUsRUFBQyxLQUFLQSxFQURMO0FBRUgsU0FBRyxLQUFLVztBQUZMLEtBQVA7QUFJSDs7QUFoQ007O0FBbUNYLE1BQU1ZLFFBQU4sU0FBdUJiLElBQXZCLENBQTRCO0FBQ3hCYixhQUFXLENBQUMyQixVQUFELEVBQWE7QUFDcEIsVUFBTUEsVUFBTjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsSUFBSTdCLE1BQUosQ0FBVzJCLFFBQVgsQ0FBaEI7QUFDQSxTQUFLdEIsR0FBTCxDQUFTLFdBQVQsRUFBc0IsRUFBdEI7QUFDSDs7QUFFRHlCLFVBQVEsQ0FBQ0MsS0FBRCxFQUFRO0FBQ1osV0FBTyxLQUFLRixRQUFMLENBQWN4QixHQUFkLENBQWtCMEIsS0FBSyxDQUFDM0IsRUFBeEIsRUFBMkIyQixLQUEzQixDQUFQO0FBQ0g7O0FBRUQsTUFBSUMsUUFBSixHQUFjO0FBQ1YsV0FBT0Msc0JBQXNCLENBQUMxQixHQUF2QixDQUEyQixLQUFLSCxFQUFoQyxFQUFvQ0EsRUFBM0M7QUFDSDs7QUFFRCxNQUFJOEIsUUFBSixHQUFlO0FBQ1gsV0FBT0MsbUJBQW1CLENBQUM1QixHQUFwQixDQUF3QixLQUFLSCxFQUE3QixFQUFpQzhCLFFBQWpDLElBQTZDO0FBQ2hEQSxjQUFRLEVBQUUsRUFEc0M7QUFFaERFLFVBQUksRUFBQyxDQUYyQztBQUdoREMsV0FBSyxFQUFFLENBSHlDO0FBSWhEQyxjQUFRLEVBQUM7QUFKdUMsS0FBcEQ7QUFNSDs7QUFFRC9CLEtBQUcsR0FBSTtBQUNILFVBQU07QUFBQ3NCLGNBQUQ7QUFBVXpCO0FBQVYsUUFBZ0IsSUFBdEI7QUFDQSxXQUFPLEVBQ0gsR0FBRyxNQUFNRyxHQUFOLEVBREE7QUFFSCxTQUFHMEIsc0JBQXNCLENBQUMxQixHQUF2QixDQUEyQkgsRUFBM0IsRUFBK0JHLEdBQS9CLEVBRkE7QUFHSHNCLGNBQVEsRUFBRUEsUUFBUSxDQUFDckIsSUFBVDtBQUhQLEtBQVA7QUFLSDs7QUEvQnVCOztBQWtDNUIsTUFBTStCLGNBQU4sU0FBNkJ6QixJQUE3QixDQUFrQztBQUM5QmIsYUFBVyxDQUFDK0IsUUFBRCxFQUFXO0FBQ2xCLFVBQU1BLFFBQU47QUFDQSxTQUFLRSxRQUFMLEdBQWdCO0FBQ1pBLGNBQVEsRUFBRSxFQURFO0FBRVpFLFVBQUksRUFBQyxDQUZPO0FBR1pDLFdBQUssRUFBRSxDQUhLO0FBSVpDLGNBQVEsRUFBQztBQUpHLEtBQWhCO0FBTUg7O0FBRURFLFlBQVUsQ0FBQ0MsU0FBRCxFQUFXQyxPQUFYLEVBQW9CO0FBQzFCLFFBQUcsS0FBS1IsUUFBTCxDQUFjQSxRQUFkLENBQXVCUyxPQUF2QixDQUErQkYsU0FBL0IsTUFBOEMsQ0FBQyxDQUFsRCxFQUFxRDtBQUNyRCxTQUFLUCxRQUFMLENBQWNRLE9BQWQ7QUFDQSxTQUFLUixRQUFMLENBQWNHLEtBQWQ7QUFDQSxTQUFLSCxRQUFMLENBQWNBLFFBQWQsQ0FBdUJVLE9BQXZCLENBQStCSCxTQUEvQjtBQUNBLFNBQUtQLFFBQUwsQ0FBY0EsUUFBZCxHQUF5QixLQUFLQSxRQUFMLENBQWNBLFFBQWQsQ0FBdUJXLEtBQXZCLENBQTZCLENBQTdCLEVBQWdDLEdBQWhDLENBQXpCLENBTDBCLENBS29DOztBQUM5RCxTQUFLWCxRQUFMLENBQWNBLFFBQWQsR0FBeUJ2QyxLQUFLLENBQUNDLElBQU4sQ0FBVyxLQUFLc0MsUUFBTCxDQUFjQSxRQUF6QixDQUF6QjtBQUNBLFNBQUtsQixLQUFMLENBQVcsSUFBWDtBQUNBeEIsc0JBQWtCO0FBRXJCOztBQUVEZSxLQUFHLEdBQUc7QUFDRixXQUFPLEVBQ0MsR0FBRyxLQUFLMkIsUUFEVDtBQUVDQSxjQUFRLEVBQUUsS0FBS0EsUUFBTCxDQUFjdEIsR0FBZCxDQUFrQmtDLENBQUMsSUFBRUMsbUJBQW1CLENBQUN4QyxHQUFwQixDQUF3QnVDLENBQXhCLEVBQTJCdkMsR0FBM0IsRUFBckI7QUFGWCxLQUFQO0FBSUg7O0FBNUI2Qjs7QUFnQ2xDMEIsc0JBQXNCLEdBQUcsSUFBSWpDLE1BQUosQ0FBVzJCLFFBQVgsQ0FBekI7QUFDQW9CLG1CQUFtQixHQUFJLElBQUkvQyxNQUFKLENBQVdjLElBQVgsQ0FBdkI7QUFDQXFCLG1CQUFtQixHQUFJLElBQUluQyxNQUFKLENBQVd1QyxjQUFYLENBQXZCO0FBRUFTLFVBQVUsR0FBRyxJQUFJaEQsTUFBSixDQUFXMkIsUUFBWCxDQUFiOztBQUVBLE1BQU1zQixlQUFlLEdBQUcsQ0FBQztBQUFFUixXQUFGO0FBQWFTLE1BQWI7QUFBbUJDO0FBQW5CLENBQUQsRUFBNkJDLEtBQTdCLEVBQW9DQyxPQUFwQyxLQUFnRDtBQUNwRSxNQUFJQyxXQUFXLEdBQUksR0FBRUYsS0FBTSxLQUFJQyxPQUFRLEVBQXZDO0FBQ0FsQixxQkFBbUIsQ0FBQzdDLEdBQXBCLENBQXdCZ0UsV0FBeEIsRUFDS2QsVUFETCxDQUNnQkMsU0FEaEIsRUFDMEIsVUFEMUI7QUFHQU0scUJBQW1CLENBQUN6RCxHQUFwQixDQUF3Qm1ELFNBQXhCLEVBQ0twQyxHQURMLENBQ1MsVUFEVCxFQUNxQmlELFdBRHJCLEVBRUtqRCxHQUZMLENBRVMsUUFGVCxFQUVrQjhDLE1BRmxCLEVBR0s5QyxHQUhMLENBR1MsTUFIVCxFQUdpQjZDLElBSGpCO0FBSUgsQ0FURDs7QUFXQSxNQUFNSyxpQkFBaUIsR0FBRyxDQUFDO0FBQUVkO0FBQUYsQ0FBRCxFQUFlVyxLQUFmLEVBQXNCQyxPQUF0QixLQUFrQztBQUN4RCxNQUFJQyxXQUFXLEdBQUksR0FBRUYsS0FBTSxLQUFJQyxPQUFRLEVBQXZDO0FBQ0FsQixxQkFBbUIsQ0FBQzdDLEdBQXBCLENBQXdCZ0UsV0FBeEIsRUFDS2QsVUFETCxDQUNnQkMsU0FEaEIsRUFDMEIsTUFEMUI7QUFHQU0scUJBQW1CLENBQUN6RCxHQUFwQixDQUF3Qm1ELFNBQXhCLEVBQ0twQyxHQURMLENBQ1MsUUFEVCxFQUNtQmlELFdBRG5CO0FBRUgsQ0FQRDs7QUFTQSxNQUFNRSxTQUFTLEdBQUcsQ0FBQ0MsT0FBRCxFQUFVTCxLQUFWLEVBQWlCQyxPQUFqQixLQUE2QjtBQUMzQyxRQUFNO0FBQUVHLGFBQUY7QUFBYXhCO0FBQWIsTUFBMkJ5QixPQUFqQztBQUNBeEIsd0JBQXNCLENBQUMzQyxHQUF2QixDQUE0QixHQUFFOEQsS0FBTSxLQUFJQyxPQUFRLEVBQWhELEVBQW1EaEQsR0FBbkQsQ0FBdUQsV0FBdkQsRUFBbUVtRCxTQUFuRSxFQUE4RW5ELEdBQTlFLENBQWtGLFVBQWxGLEVBQThGMkIsUUFBOUY7QUFDSCxDQUhEOztBQUtBLE1BQU0wQixhQUFhLEdBQUc7QUFDbEIsc0JBQW1CVCxlQUREO0FBRWxCLHlCQUFzQk0saUJBRko7QUFHbEJDLFdBSGtCO0FBSWxCLHNCQUFvQixDQUFDQyxPQUFELEVBQVVMLEtBQVYsRUFBaUJDLE9BQWpCLEtBQTJCO0FBQzNDLFFBQUlDLFdBQVcsR0FBSSxHQUFFRixLQUFNLEtBQUlDLE9BQVEsRUFBdkM7QUFDQSxRQUFJO0FBQUNNO0FBQUQsUUFBUUYsT0FBWjtBQUNBeEIsMEJBQXNCLENBQUMzQyxHQUF2QixDQUEyQmdFLFdBQTNCLEVBQXdDakQsR0FBeEMsQ0FBNEMsTUFBNUMsRUFBbURzRCxJQUFuRDtBQUNIO0FBUmlCLENBQXRCOztBQVlBLE1BQU1DLHNCQUFzQixHQUFHLENBQUNILE9BQUQsRUFBVUwsS0FBVixFQUFnQkMsT0FBaEIsS0FBNEI7QUFDdkQsTUFBSTtBQUFFUTtBQUFGLE1BQVlKLE9BQWhCO0FBQ0EsTUFBSSxDQUFDQyxhQUFhLENBQUNHLEtBQUQsQ0FBbEIsRUFBMkIsT0FBT3pFLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGdCQUFld0UsS0FBTSxTQUFRVCxLQUFNLElBQUdDLE9BQVEsRUFBM0QsQ0FBUDtBQUMzQkssZUFBYSxDQUFDRyxLQUFELENBQWIsQ0FBcUJKLE9BQXJCLEVBQThCTCxLQUE5QixFQUFvQ0MsT0FBcEM7QUFDSCxDQUpEOztBQU1BekUsTUFBTSxDQUFDSSxPQUFQLENBQWU4RSxTQUFmLENBQXlCL0UsV0FBekIsQ0FBcUMsQ0FBQzBFLE9BQUQsRUFBVU0sTUFBVixFQUFrQkMsUUFBbEIsS0FBK0I7QUFDaEUsUUFBTTtBQUNGWCxXQURFO0FBRUZZLE9BQUcsRUFBRTtBQUNEN0Q7QUFEQztBQUZILE1BSUkyRCxNQUpWO0FBTUEsTUFBSSxDQUFDTixPQUFMLEVBQWNyRSxPQUFPLENBQUM4RSxLQUFSLENBQWMsZUFBZDs7QUFDZCxNQUFJO0FBQ0FOLDBCQUFzQixDQUFDSCxPQUFELEVBQVVyRCxFQUFWLEVBQWNpRCxPQUFkLENBQXRCO0FBQ0gsR0FGRCxDQUVFLE9BQU90RCxLQUFQLEVBQWM7QUFDWlgsV0FBTyxDQUFDQyxHQUFSLENBQVlVLEtBQVo7QUFDSDtBQUNKLENBYkQ7O0FBaUJBLE1BQU1vRSxVQUFVLEdBQUcsTUFBTTtBQUNyQnZGLFFBQU0sQ0FBQ3dGLElBQVAsQ0FBWUMsS0FBWixDQUFrQixFQUFsQixFQUF1QkMsT0FBRCxJQUFhO0FBQy9CLFFBQUlDLFVBQVUsR0FBR0QsT0FBTyxDQUFDRSxNQUFSLENBQWUsQ0FBQztBQUFFQztBQUFGLEtBQUQsS0FBYSxDQUFDQSxHQUFHLENBQUNDLFVBQUosQ0FBZSxRQUFmLENBQTdCLENBQWpCO0FBQ0FDLFdBQU8sQ0FBQ0MsR0FBUixDQUNJTCxVQUFVLENBQUMzRCxHQUFYLENBQWUsQ0FBQztBQUFFUixRQUFFLEVBQUVnRDtBQUFOLEtBQUQsS0FBbUIsSUFBSXVCLE9BQUosQ0FBWSxDQUFDRSxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDL0RsRyxZQUFNLENBQUNtRyxhQUFQLENBQXFCQyxZQUFyQixDQUFrQztBQUFFNUI7QUFBRixPQUFsQyxFQUE4QzZCLE1BQUQsSUFBWUosT0FBTyxDQUFDO0FBQzdEekIsYUFENkQ7QUFFN0Q2QjtBQUY2RCxPQUFELENBQWhFO0FBSUgsS0FMaUMsQ0FBbEMsQ0FESixFQVFFQyxJQVJGLENBUVFDLFdBQUQsSUFBaUI7QUFDcEJuQyxnQkFBVSxHQUFHLElBQUloRCxNQUFKLENBQVcyQixRQUFYLENBQWI7QUFDQXdELGlCQUFXLENBQUN0RixPQUFaLENBQW9CLENBQUM7QUFBRXVELGFBQUY7QUFBUzZCO0FBQVQsT0FBRCxLQUF1QjtBQUN2QyxZQUFJRyxhQUFhLEdBQUdILE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQixDQUFDO0FBQUNDO0FBQUQsU0FBRCxLQUFtQkEsYUFBYSxLQUFHLENBQUMsQ0FBckQsQ0FBcEI7QUFDQSxZQUFJLENBQUM7QUFBQ2pDLGlCQUFEO0FBQVNvQjtBQUFULFNBQUQsSUFBa0JRLE1BQU0sQ0FBQ00sTUFBUCxDQUFjSCxhQUFkLEVBQTRCLENBQTVCLENBQXRCO0FBQ0EsWUFBSXhELFVBQVUsR0FBSSxHQUFFd0IsS0FBTSxLQUFJQyxPQUFRLEVBQXRDO0FBQ0EsWUFBSW1DLEdBQUcsR0FBSSxJQUFJN0QsUUFBSixDQUFhQyxVQUFiLENBQVg7QUFFQTRELFdBQUcsQ0FBQ25GLEdBQUosQ0FBUSxjQUFSLEVBQXdCb0UsR0FBeEI7QUFDQXhDLDhCQUFzQixDQUFDNUIsR0FBdkIsQ0FBMkJ1QixVQUEzQixFQUFzQzRELEdBQXRDO0FBQ0F4QyxrQkFBVSxDQUFDM0MsR0FBWCxDQUFldUIsVUFBZixFQUEyQjRELEdBQTNCO0FBQ0FQLGNBQU0sQ0FBQ3BGLE9BQVAsQ0FBZTRGLEtBQUssSUFBSTtBQUNwQixnQkFBTTtBQUNGcEMsbUJBREU7QUFFRmlDLHlCQUZFO0FBR0ZiO0FBSEUsY0FJRmdCLEtBSko7QUFLQSxjQUFJN0QsVUFBVSxHQUFJLEdBQUV3QixLQUFNLEtBQUlDLE9BQVEsRUFBdEM7QUFDQSxjQUFJcUMsZ0JBQWdCLEdBQUksR0FBRXRDLEtBQU0sS0FBSWtDLGFBQWMsRUFBbEQ7QUFDQSxjQUFJSyxXQUFXLEdBQUcxRCxzQkFBc0IsQ0FBQzNDLEdBQXZCLENBQTJCc0MsVUFBM0IsRUFBdUN2QixHQUF2QyxDQUEyQyxjQUEzQyxFQUEyRG9FLEdBQTNELENBQWxCO0FBQ0EsY0FBSW1CLGlCQUFpQixHQUFHM0Qsc0JBQXNCLENBQUMzQyxHQUF2QixDQUEyQm9HLGdCQUEzQixDQUF4QjtBQUNBRSwyQkFBaUIsQ0FBQzlELFFBQWxCLENBQTJCNkQsV0FBM0I7QUFDSCxTQVhEO0FBWUgsT0FyQkQ7QUFzQkgsS0FoQ0Q7QUFpQ0gsR0FuQ0Q7QUFvQ0gsQ0FyQ0Q7O0FBdUNBL0csTUFBTSxDQUFDbUcsYUFBUCxDQUFxQmMsa0JBQXJCLENBQXdDOUcsV0FBeEMsQ0FBb0RvRixVQUFwRDtBQUNBdkYsTUFBTSxDQUFDbUcsYUFBUCxDQUFxQmUsV0FBckIsQ0FBaUMvRyxXQUFqQyxDQUE2Q29GLFVBQTdDLEUiLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNSk7XG4iLCJjb25zdCBoYW5kbGVycyA9IG5ldyBTZXQoKTtcclxuXHJcbmNocm9tZS5icm93c2VyQWN0aW9uLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcigoKT0+e1xyXG4gICAgY2hyb21lLnJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKCk7XHJcbn0pXHJcblxyXG4kJCRTdWJTY3JpYmVUb1Bvc3RhID0gKGhhbmRsZXIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwibmV3IHN1YnNjcmlwdGlvbiBmcm9tIG9wdGlvbnMgcGFnZVwiKVxyXG4gICAgaGFuZGxlcnMuYWRkKGhhbmRsZXIpO1xyXG59XHJcblxyXG52YXIgdGltZXI7XHJcblxyXG5mdW5jdGlvbiByZWZyZXNoT3B0aW9uc1BhZ2UoKSB7XHJcbiAgICBjbGVhclRpbWVvdXQodGltZXIpXHJcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKGhhbmRsZXJzKS5mb3JFYWNoKGggPT4gaCgpKVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgIH1cclxuICAgIH0sMTAwKVxyXG4gICAgXHJcbn1cclxuXHJcblxyXG5jbGFzcyBCdWNrZXQge1xyXG4gICAgY29uc3RydWN0b3IoSXRlbUNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtQ29uc3RydWN0b3IgPSBJdGVtQ29uc3RydWN0b3I7XHJcbiAgICAgICAgdGhpcy5fYnVja2V0ID0ge31cclxuICAgIH1cclxuICAgIGFkZChpZCkge1xyXG4gICAgICAgIGNvbnN0IHsgSXRlbUNvbnN0cnVjdG9yIH0gPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5fYnVja2V0W2lkXSkgdGhpcy5fYnVja2V0W2lkXSA9IG5ldyBJdGVtQ29uc3RydWN0b3IoaWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRbaWRdXHJcbiAgICB9XHJcbiAgICBzZXQoaWQsIGl0ZW0pe1xyXG4gICAgICAgIHRoaXMuX2J1Y2tldFtpZF0gPSBpdGVtO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRbaWRdO1xyXG4gICAgfVxyXG4gICAgZ2V0KGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1Y2tldFtpZF0gfHwge1xyXG4gICAgICAgICAgICBnZXQ6ICgpID0+ICh7fSksXHJcbiAgICAgICAgICAgIHNldDogKCkgPT4gKHsgZ2V0OiAoKSA9PiB7IH0gfSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgbGlzdChkZWNheSA9IDEwICogMTAwMCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9idWNrZXQpLm1hcChrID0+IHRoaXMuX2J1Y2tldFtrXSlcclxuICAgICAgICAvLyAuZmlsdGVyKGkgPT4gIWRlY2F5IHx8ICFpLmlzRGVjYXllZChkZWNheSkpXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEl0ZW0ge1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy50b3VjaCh0cnVlKTtcclxuICAgIH1cclxuICAgIHRvdWNoKG1vZGlmeSkge1xyXG4gICAgICAgIHRoaXMuX2pzb24gPSBtb2RpZnkgPyB1bmRlZmluZWQgOiB0aGlzLl9qc29uO1xyXG4gICAgICAgIHRoaXMubGFzdFNlZW4gPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGlmIChtb2RpZnkpIHJlZnJlc2hPcHRpb25zUGFnZSgpO1xyXG4gICAgfVxyXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLnRvdWNoKHRoaXMuYXR0cmlidXRlc1trZXldICE9PSB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpc0RlY2F5ZWQoZGVjYXkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICBpZiAoZGVjYXkgJiYgKCh0aGlzLmxhc3RTZWVuICsgZGVjYXkpIDwgRGF0ZS5ub3coKSkpIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAganNvbigpIHtcclxuICAgICAgICB0aGlzLl9qc29uID0gdGhpcy5fanNvbiB8fCB0aGlzLmdldCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9qc29uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDp0aGlzLmlkLFxyXG4gICAgICAgICAgICAuLi50aGlzLmF0dHJpYnV0ZXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUYWJGcmFtZSBleHRlbmRzIEl0ZW0ge1xyXG4gICAgY29uc3RydWN0b3IodGFiRnJhbWVJZCkge1xyXG4gICAgICAgIHN1cGVyKHRhYkZyYW1lSWQpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgQnVja2V0KFRhYkZyYW1lKVxyXG4gICAgICAgIHRoaXMuc2V0KFwibGlzdGVuZXJzXCIsIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDaGlsZChjaGlsZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnNldChjaGlsZC5pZCxjaGlsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHdpbmRvd0lkKCl7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvd3NCeVRhYkFuZEZyYW1lSWQuZ2V0KHRoaXMuaWQpLmlkXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1lc3NhZ2VzICgpe1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdlQnlUYWJGcmFtZUlkLmdldCh0aGlzLmlkKS5tZXNzYWdlcyB8fCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcclxuICAgICAgICAgICAgc2VudDowLFxyXG4gICAgICAgICAgICBjb3VudDogMCxcclxuICAgICAgICAgICAgcmVjZWl2ZWQ6MFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0ICgpIHtcclxuICAgICAgICBjb25zdCB7Y2hpbGRyZW4saWR9ID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5zdXBlci5nZXQoKSxcclxuICAgICAgICAgICAgLi4ud2luZG93c0J5VGFiQW5kRnJhbWVJZC5nZXQoaWQpLmdldCgpLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4ubGlzdCgpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBNZXNzYWdlc0J1Y2tldCBleHRlbmRzIEl0ZW0ge1xyXG4gICAgY29uc3RydWN0b3Iod2luZG93SWQpIHtcclxuICAgICAgICBzdXBlcih3aW5kb3dJZCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IHtcclxuICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxyXG4gICAgICAgICAgICBzZW50OjAsXHJcbiAgICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgICByZWNlaXZlZDowXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhZGRNZXNzYWdlKG1lc3NhZ2VJZCxjb3VudGVyKSB7XHJcbiAgICAgICAgaWYodGhpcy5tZXNzYWdlcy5tZXNzYWdlcy5pbmRleE9mKG1lc3NhZ2VJZCkgIT09IC0xKSByZXR1cm5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VzW2NvdW50ZXJdKys7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5jb3VudCsrO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXMubWVzc2FnZXMudW5zaGlmdChtZXNzYWdlSWQpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXMubWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzLm1lc3NhZ2VzLnNsaWNlKDAsIDEwMCk7Ly90byBhdm9pZCBkZW5pYWwgb2Ygc2VydmljZVxyXG4gICAgICAgIHRoaXMubWVzc2FnZXMubWVzc2FnZXMgPSBBcnJheS5mcm9tKHRoaXMubWVzc2FnZXMubWVzc2FnZXMpXHJcbiAgICAgICAgdGhpcy50b3VjaCh0cnVlKVxyXG4gICAgICAgIHJlZnJlc2hPcHRpb25zUGFnZSgpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5tZXNzYWdlcyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiB0aGlzLm1lc3NhZ2VzLm1hcChtPT5tZXNzYWdlc0J5TWVzc2FnZUlkLmdldChtKS5nZXQoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxud2luZG93c0J5VGFiQW5kRnJhbWVJZCA9IG5ldyBCdWNrZXQoVGFiRnJhbWUpO1xyXG5tZXNzYWdlc0J5TWVzc2FnZUlkICA9IG5ldyBCdWNrZXQoSXRlbSk7XHJcbm1lc3NhZ2VCeVRhYkZyYW1lSWQgID0gbmV3IEJ1Y2tldChNZXNzYWdlc0J1Y2tldCk7XHJcblxyXG50YWJzRnJhbWVzID0gbmV3IEJ1Y2tldChUYWJGcmFtZSk7XHJcblxyXG5jb25zdCByZWNlaXZlZE1lc3NhZ2UgPSAoeyBtZXNzYWdlSWQsIGRhdGEsIG9yaWdpbiB9LHRhYklkLCBmcmFtZUlkKSA9PiB7XHJcbiAgICBsZXQgdGFiV2luZG93SWQgPSBgJHt0YWJJZH06OiR7ZnJhbWVJZH1gO1xyXG4gICAgbWVzc2FnZUJ5VGFiRnJhbWVJZC5hZGQodGFiV2luZG93SWQpXHJcbiAgICAgICAgLmFkZE1lc3NhZ2UobWVzc2FnZUlkLFwicmVjZWl2ZWRcIilcclxuICAgIFxyXG4gICAgbWVzc2FnZXNCeU1lc3NhZ2VJZC5hZGQobWVzc2FnZUlkKVxyXG4gICAgICAgIC5zZXQoXCJyZWNlaXZlclwiLCB0YWJXaW5kb3dJZClcclxuICAgICAgICAuc2V0KFwib3JpZ2luXCIsb3JpZ2luKVxyXG4gICAgICAgIC5zZXQoXCJkYXRhXCIsIGRhdGEpO1xyXG59XHJcblxyXG5jb25zdCBhY2NvdW50Rm9yTWVzc2FnZSA9ICh7IG1lc3NhZ2VJZCB9LHRhYklkLCBmcmFtZUlkKSA9PiB7XHJcbiAgICBsZXQgdGFiV2luZG93SWQgPSBgJHt0YWJJZH06OiR7ZnJhbWVJZH1gO1xyXG4gICAgbWVzc2FnZUJ5VGFiRnJhbWVJZC5hZGQodGFiV2luZG93SWQpXHJcbiAgICAgICAgLmFkZE1lc3NhZ2UobWVzc2FnZUlkLFwic2VudFwiKVxyXG4gICAgXHJcbiAgICBtZXNzYWdlc0J5TWVzc2FnZUlkLmFkZChtZXNzYWdlSWQpXHJcbiAgICAgICAgLnNldChcInNlbmRlclwiLCB0YWJXaW5kb3dJZCk7XHJcbn1cclxuXHJcbmNvbnN0IGxpc3RlbmVycyA9IChtZXNzYWdlLCB0YWJJZCwgZnJhbWVJZCkgPT4ge1xyXG4gICAgY29uc3QgeyBsaXN0ZW5lcnMsIHdpbmRvd0lkICB9ID0gbWVzc2FnZTtcclxuICAgIHdpbmRvd3NCeVRhYkFuZEZyYW1lSWQuYWRkKGAke3RhYklkfTo6JHtmcmFtZUlkfWApLnNldChcImxpc3RlbmVyc1wiLGxpc3RlbmVycykuc2V0KFwid2luZG93SWRcIiwgd2luZG93SWQpXHJcbn1cclxuXHJcbmNvbnN0IHRvcGljSGFuZGxlcnMgPSB7XHJcbiAgICBcInJlY2VpdmVkLW1lc3NhZ2VcIjpyZWNlaXZlZE1lc3NhZ2UsXHJcbiAgICBcImFjY291bnQtZm9yLW1lc3NhZ2VcIjphY2NvdW50Rm9yTWVzc2FnZSxcclxuICAgIGxpc3RlbmVycyxcclxuICAgIFwiYWNjb3VudC1mb3ItcGF0aFwiOiAobWVzc2FnZSwgdGFiSWQsIGZyYW1lSWQpPT57XHJcbiAgICAgICAgbGV0IHRhYldpbmRvd0lkID0gYCR7dGFiSWR9Ojoke2ZyYW1lSWR9YDtcclxuICAgICAgICBsZXQge3BhdGh9ID1tZXNzYWdlO1xyXG4gICAgICAgIHdpbmRvd3NCeVRhYkFuZEZyYW1lSWQuYWRkKHRhYldpbmRvd0lkKS5zZXQoXCJwYXRoXCIscGF0aCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jb25zdCBwcm9jZXNzSW5jb21pbmdNZXNzYWdlID0gKG1lc3NhZ2UsIHRhYklkLGZyYW1lSWQpID0+IHtcclxuICAgIGxldCB7IHRvcGljIH0gPSBtZXNzYWdlO1xyXG4gICAgaWYgKCF0b3BpY0hhbmRsZXJzW3RvcGljXSkgcmV0dXJuIGNvbnNvbGUubG9nKGBUT0RPOiBoYW5kZWwgJHt0b3BpY30gZnJvbSAke3RhYklkfToke2ZyYW1lSWR9YClcclxuICAgIHRvcGljSGFuZGxlcnNbdG9waWNdKG1lc3NhZ2UsIHRhYklkLGZyYW1lSWQpXHJcbn1cclxuXHJcbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobWVzc2FnZSwgc2VuZGVyLCByZXNwb25zZSkgPT4ge1xyXG4gICAgY29uc3QgeyBcclxuICAgICAgICBmcmFtZUlkLFxyXG4gICAgICAgIHRhYjoge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgIH0gfSA9IHNlbmRlclxyXG5cclxuICAgIGlmICghbWVzc2FnZSkgY29uc29sZS50cmFjZShcImVtcHR5IG1lc3NhZ2VcIik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHByb2Nlc3NJbmNvbWluZ01lc3NhZ2UobWVzc2FnZSwgaWQsIGZyYW1lSWQpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgfVxyXG59KVxyXG5cclxuXHJcblxyXG5jb25zdCB1cGRhdGVUYWJzID0gKCkgPT4ge1xyXG4gICAgY2hyb21lLnRhYnMucXVlcnkoe30sIChhbGxUYWJzKSA9PiB7XHJcbiAgICAgICAgbGV0IHRhcmdldFRhYnMgPSBhbGxUYWJzLmZpbHRlcigoeyB1cmwgfSkgPT4gIXVybC5zdGFydHNXaXRoKFwiY2hyb21lXCIpKTtcclxuICAgICAgICBQcm9taXNlLmFsbChcclxuICAgICAgICAgICAgdGFyZ2V0VGFicy5tYXAoKHsgaWQ6IHRhYklkIH0pID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGNocm9tZS53ZWJOYXZpZ2F0aW9uLmdldEFsbEZyYW1lcyh7IHRhYklkIH0sIChmcmFtZXMpID0+IHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lc1xyXG4gICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIH0pKVxyXG5cclxuICAgICAgICApLnRoZW4oKHVwZGF0ZWRUYWJzKSA9PiB7XHJcbiAgICAgICAgICAgIHRhYnNGcmFtZXMgPSBuZXcgQnVja2V0KFRhYkZyYW1lKTtcclxuICAgICAgICAgICAgdXBkYXRlZFRhYnMuZm9yRWFjaCgoeyB0YWJJZCwgZnJhbWVzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0b3BGcmFtZUluZGV4ID0gZnJhbWVzLmZpbmRJbmRleCgoe3BhcmVudEZyYW1lSWR9KT0+cGFyZW50RnJhbWVJZD09PS0xKTtcclxuICAgICAgICAgICAgICAgIHZhciBbe2ZyYW1lSWQsdXJsfV0gPSBmcmFtZXMuc3BsaWNlKHRvcEZyYW1lSW5kZXgsMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFiRnJhbWVJZCA9IGAke3RhYklkfTo6JHtmcmFtZUlkfWA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9wID0gIG5ldyBUYWJGcmFtZSh0YWJGcmFtZUlkKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdG9wLnNldChcImxvY2F0aW9uSHJlZlwiLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93c0J5VGFiQW5kRnJhbWVJZC5zZXQodGFiRnJhbWVJZCx0b3ApO1xyXG4gICAgICAgICAgICAgICAgdGFic0ZyYW1lcy5zZXQodGFiRnJhbWVJZCwgdG9wKVxyXG4gICAgICAgICAgICAgICAgZnJhbWVzLmZvckVhY2goZnJhbWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RnJhbWVJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsXHJcbiAgICAgICAgICAgICAgICAgICAgfSA9IGZyYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJGcmFtZUlkID0gYCR7dGFiSWR9Ojoke2ZyYW1lSWR9YDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50VGFiRnJhbWVJZCA9IGAke3RhYklkfTo6JHtwYXJlbnRGcmFtZUlkfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdpbmRvd0ZyYW1lID0gd2luZG93c0J5VGFiQW5kRnJhbWVJZC5hZGQodGFiRnJhbWVJZCkuc2V0KFwibG9jYXRpb25IcmVmXCIsIHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudFdpbmRvd0ZyYW1lID0gd2luZG93c0J5VGFiQW5kRnJhbWVJZC5hZGQocGFyZW50VGFiRnJhbWVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50V2luZG93RnJhbWUuYWRkQ2hpbGQod2luZG93RnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxufVxyXG5cclxuY2hyb21lLndlYk5hdmlnYXRpb24ub25ET01Db250ZW50TG9hZGVkLmFkZExpc3RlbmVyKHVwZGF0ZVRhYnMpXHJcbmNocm9tZS53ZWJOYXZpZ2F0aW9uLm9uQ29tbWl0dGVkLmFkZExpc3RlbmVyKHVwZGF0ZVRhYnMpIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlUm9vdCI6IiJ9