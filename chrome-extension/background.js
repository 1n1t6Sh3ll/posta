/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 35);
/******/ })
/************************************************************************/
/******/ ({

/***/ 35:
/***/ (function(module, exports) {

const handlers = new Set();
chrome.browserAction.onClicked.addListener(() => {
  chrome.runtime.openOptionsPage();
});

$$$SubScribeToPosta = handler => {
  console.log("new subscription from options page");
  handlers.add(handler);
};

var timer;

function refreshOptionsPage() {
  clearTimeout(timer);
  timer = setTimeout(() => {
    try {
      Array.from(handlers).forEach(h => h());
    } catch (error) {
      console.log(error);
    }
  }, 100);
}

class Bucket {
  constructor(ItemConstructor) {
    this.ItemConstructor = ItemConstructor;
    this._bucket = {};
  }

  add(id) {
    const {
      ItemConstructor
    } = this;
    if (!this._bucket[id]) this._bucket[id] = new ItemConstructor(id);
    return this._bucket[id];
  }

  set(id, item) {
    this._bucket[id] = item;
    return this._bucket[id];
  }

  get(id) {
    return this._bucket[id] || {
      get: () => ({}),
      set: () => ({
        get: () => {}
      })
    };
  }

  list(decay = 10 * 1000) {
    return Object.keys(this._bucket).map(k => this._bucket[k]); // .filter(i => !decay || !i.isDecayed(decay))
  }

}

class Item {
  constructor(id) {
    this.attributes = {};
    this.id = id;
    this.touch(true);
  }

  touch(modify) {
    this._json = modify ? undefined : this._json;
    this.lastSeen = Date.now();
    if (modify) refreshOptionsPage();
  }

  set(key, value) {
    this.touch(this.attributes[key] !== value);
    this.attributes[key] = value;
    return this;
  }

  isDecayed(decay) {
    return false;
    if (decay && this.lastSeen + decay < Date.now()) return true;
  }

  json() {
    this._json = this._json || this.get();
    return this._json;
  }

  get() {
    return {
      id: this.id,
      ...this.attributes
    };
  }

}

class TabFrame extends Item {
  constructor(tabFrameId) {
    super(tabFrameId);
    this.children = new Bucket(TabFrame);
    this.set("listeners", []);
  }

  addChild(child) {
    return this.children.set(child.id, child);
  }

  get windowId() {
    return windowsByTabAndFrameId.get(this.id).id;
  }

  get messages() {
    return messageByTabFrameId.get(this.id).messages || {
      messages: [],
      sent: 0,
      count: 0,
      received: 0
    };
  }

  get() {
    const {
      children,
      id
    } = this;
    return { ...super.get(),
      ...windowsByTabAndFrameId.get(id).get(),
      children: children.list()
    };
  }

}

class MessagesBucket extends Item {
  constructor(windowId) {
    super(windowId);
    this.messages = {
      messages: [],
      sent: 0,
      count: 0,
      received: 0
    };
  }

  addMessage(messageId, counter) {
    if (this.messages.messages.indexOf(messageId) !== -1) return;
    this.messages[counter]++;
    this.messages.count++;
    this.messages.messages.unshift(messageId);
    this.messages.messages = this.messages.messages.slice(0, 100); //to avoid denial of service

    this.messages.messages = Array.from(this.messages.messages);
    this.touch(true);
    refreshOptionsPage();
  }

  get() {
    return { ...this.messages,
      messages: this.messages.map(m => messagesByMessageId.get(m).get())
    };
  }

}

windowsByTabAndFrameId = new Bucket(TabFrame);
messagesByMessageId = new Bucket(Item);
messageByTabFrameId = new Bucket(MessagesBucket);
tabsFrames = new Bucket(TabFrame);

const receivedMessage = ({
  messageId,
  data,
  origin
}, tabId, frameId) => {
  let tabWindowId = `${tabId}::${frameId}`;
  messageByTabFrameId.add(tabWindowId).addMessage(messageId, "received");
  messagesByMessageId.add(messageId).set("receiver", tabWindowId).set("origin", origin).set("data", data);
};

const accountForMessage = ({
  messageId
}, tabId, frameId) => {
  let tabWindowId = `${tabId}::${frameId}`;
  messageByTabFrameId.add(tabWindowId).addMessage(messageId, "sent");
  messagesByMessageId.add(messageId).set("sender", tabWindowId);
};

const listeners = (message, tabId, frameId) => {
  const {
    listeners,
    windowId
  } = message;
  windowsByTabAndFrameId.add(`${tabId}::${frameId}`).set("listeners", listeners).set("windowId", windowId);
};

const topicHandlers = {
  "received-message": receivedMessage,
  "account-for-message": accountForMessage,
  listeners,
  "account-for-path": (message, tabId, frameId) => {
    let tabWindowId = `${tabId}::${frameId}`;
    let {
      path
    } = message;
    windowsByTabAndFrameId.add(tabWindowId).set("path", path);
  }
};

const processIncomingMessage = (message, tabId, frameId) => {
  let {
    topic
  } = message;
  if (!topicHandlers[topic]) return console.log(`TODO: handel ${topic} from ${tabId}:${frameId}`);
  topicHandlers[topic](message, tabId, frameId);
};

chrome.runtime.onMessage.addListener((message, sender, response) => {
  const {
    frameId,
    tab: {
      id
    }
  } = sender;
  if (!message) console.trace("empty message");

  try {
    processIncomingMessage(message, id, frameId);
  } catch (error) {
    console.log(error);
  }
});

const updateTabs = () => {
  chrome.tabs.query({}, allTabs => {
    let targetTabs = allTabs.filter(({
      url
    }) => !url.startsWith("chrome"));
    Promise.all(targetTabs.map(({
      id: tabId
    }) => new Promise((resolve, reject) => {
      chrome.webNavigation.getAllFrames({
        tabId
      }, frames => resolve({
        tabId,
        frames
      }));
    }))).then(updatedTabs => {
      tabsFrames = new Bucket(TabFrame);
      updatedTabs.forEach(({
        tabId,
        frames
      }) => {
        let topFrameIndex = frames.findIndex(({
          parentFrameId
        }) => parentFrameId === -1);
        if (typeof topFrameIndex === "undefined") return;
        let [{
          frameId,
          url
        }] = frames.splice(topFrameIndex, 1);
        let tabFrameId = `${tabId}::${frameId}`;
        let top = new TabFrame(tabFrameId);
        top.set("locationHref", url);
        windowsByTabAndFrameId.set(tabFrameId, top);
        tabsFrames.set(tabFrameId, top);
        frames.forEach(frame => {
          const {
            frameId,
            parentFrameId,
            url
          } = frame;
          let tabFrameId = `${tabId}::${frameId}`;
          let parentTabFrameId = `${tabId}::${parentFrameId}`;
          let windowFrame = windowsByTabAndFrameId.add(tabFrameId).set("locationHref", url);
          let parentWindowFrame = windowsByTabAndFrameId.add(parentTabFrameId);
          parentWindowFrame.addChild(windowFrame);
        });
      });
    });
  });
};

chrome.webNavigation.onDOMContentLoaded.addListener(updateTabs);
chrome.webNavigation.onCommitted.addListener(updateTabs);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4dGVuc2lvbi9iYWNrZ3JvdW5kLmpzIl0sIm5hbWVzIjpbImhhbmRsZXJzIiwiU2V0IiwiY2hyb21lIiwiYnJvd3NlckFjdGlvbiIsIm9uQ2xpY2tlZCIsImFkZExpc3RlbmVyIiwicnVudGltZSIsIm9wZW5PcHRpb25zUGFnZSIsIiQkJFN1YlNjcmliZVRvUG9zdGEiLCJoYW5kbGVyIiwiY29uc29sZSIsImxvZyIsImFkZCIsInRpbWVyIiwicmVmcmVzaE9wdGlvbnNQYWdlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJoIiwiZXJyb3IiLCJCdWNrZXQiLCJjb25zdHJ1Y3RvciIsIkl0ZW1Db25zdHJ1Y3RvciIsIl9idWNrZXQiLCJpZCIsInNldCIsIml0ZW0iLCJnZXQiLCJsaXN0IiwiZGVjYXkiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiayIsIkl0ZW0iLCJhdHRyaWJ1dGVzIiwidG91Y2giLCJtb2RpZnkiLCJfanNvbiIsInVuZGVmaW5lZCIsImxhc3RTZWVuIiwiRGF0ZSIsIm5vdyIsImtleSIsInZhbHVlIiwiaXNEZWNheWVkIiwianNvbiIsIlRhYkZyYW1lIiwidGFiRnJhbWVJZCIsImNoaWxkcmVuIiwiYWRkQ2hpbGQiLCJjaGlsZCIsIndpbmRvd0lkIiwid2luZG93c0J5VGFiQW5kRnJhbWVJZCIsIm1lc3NhZ2VzIiwibWVzc2FnZUJ5VGFiRnJhbWVJZCIsInNlbnQiLCJjb3VudCIsInJlY2VpdmVkIiwiTWVzc2FnZXNCdWNrZXQiLCJhZGRNZXNzYWdlIiwibWVzc2FnZUlkIiwiY291bnRlciIsImluZGV4T2YiLCJ1bnNoaWZ0Iiwic2xpY2UiLCJtIiwibWVzc2FnZXNCeU1lc3NhZ2VJZCIsInRhYnNGcmFtZXMiLCJyZWNlaXZlZE1lc3NhZ2UiLCJkYXRhIiwib3JpZ2luIiwidGFiSWQiLCJmcmFtZUlkIiwidGFiV2luZG93SWQiLCJhY2NvdW50Rm9yTWVzc2FnZSIsImxpc3RlbmVycyIsIm1lc3NhZ2UiLCJ0b3BpY0hhbmRsZXJzIiwicGF0aCIsInByb2Nlc3NJbmNvbWluZ01lc3NhZ2UiLCJ0b3BpYyIsIm9uTWVzc2FnZSIsInNlbmRlciIsInJlc3BvbnNlIiwidGFiIiwidHJhY2UiLCJ1cGRhdGVUYWJzIiwidGFicyIsInF1ZXJ5IiwiYWxsVGFicyIsInRhcmdldFRhYnMiLCJmaWx0ZXIiLCJ1cmwiLCJzdGFydHNXaXRoIiwiUHJvbWlzZSIsImFsbCIsInJlc29sdmUiLCJyZWplY3QiLCJ3ZWJOYXZpZ2F0aW9uIiwiZ2V0QWxsRnJhbWVzIiwiZnJhbWVzIiwidGhlbiIsInVwZGF0ZWRUYWJzIiwidG9wRnJhbWVJbmRleCIsImZpbmRJbmRleCIsInBhcmVudEZyYW1lSWQiLCJzcGxpY2UiLCJ0b3AiLCJmcmFtZSIsInBhcmVudFRhYkZyYW1lSWQiLCJ3aW5kb3dGcmFtZSIsInBhcmVudFdpbmRvd0ZyYW1lIiwib25ET01Db250ZW50TG9hZGVkIiwib25Db21taXR0ZWQiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FB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O0FBS0EsY0FBSTdELFVBQVUsR0FBSSxHQUFFd0IsS0FBTSxLQUFJQyxPQUFRLEVBQXRDO0FBQ0EsY0FBSXFDLGdCQUFnQixHQUFJLEdBQUV0QyxLQUFNLEtBQUlrQyxhQUFjLEVBQWxEO0FBQ0EsY0FBSUssV0FBVyxHQUFHMUQsc0JBQXNCLENBQUMzQyxHQUF2QixDQUEyQnNDLFVBQTNCLEVBQXVDdkIsR0FBdkMsQ0FBMkMsY0FBM0MsRUFBMkRvRSxHQUEzRCxDQUFsQjtBQUNBLGNBQUltQixpQkFBaUIsR0FBRzNELHNCQUFzQixDQUFDM0MsR0FBdkIsQ0FBMkJvRyxnQkFBM0IsQ0FBeEI7QUFDQUUsMkJBQWlCLENBQUM5RCxRQUFsQixDQUEyQjZELFdBQTNCO0FBQ0gsU0FYRDtBQVlILE9BdEJEO0FBdUJILEtBakNEO0FBa0NILEdBcENEO0FBcUNILENBdENEOztBQXdDQS9HLE1BQU0sQ0FBQ21HLGFBQVAsQ0FBcUJjLGtCQUFyQixDQUF3QzlHLFdBQXhDLENBQW9Eb0YsVUFBcEQ7QUFDQXZGLE1BQU0sQ0FBQ21HLGFBQVAsQ0FBcUJlLFdBQXJCLENBQWlDL0csV0FBakMsQ0FBNkNvRixVQUE3QyxFIiwiZmlsZSI6ImJhY2tncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzUpO1xuIiwiY29uc3QgaGFuZGxlcnMgPSBuZXcgU2V0KCk7XHJcblxyXG5jaHJvbWUuYnJvd3NlckFjdGlvbi5vbkNsaWNrZWQuYWRkTGlzdGVuZXIoKCk9PntcclxuICAgIGNocm9tZS5ydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpO1xyXG59KVxyXG5cclxuJCQkU3ViU2NyaWJlVG9Qb3N0YSA9IChoYW5kbGVyKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIm5ldyBzdWJzY3JpcHRpb24gZnJvbSBvcHRpb25zIHBhZ2VcIilcclxuICAgIGhhbmRsZXJzLmFkZChoYW5kbGVyKTtcclxufVxyXG5cclxudmFyIHRpbWVyO1xyXG5cclxuZnVuY3Rpb24gcmVmcmVzaE9wdGlvbnNQYWdlKCkge1xyXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxyXG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgQXJyYXkuZnJvbShoYW5kbGVycykuZm9yRWFjaChoID0+IGgoKSlcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9LDEwMClcclxuICAgIFxyXG59XHJcblxyXG5cclxuY2xhc3MgQnVja2V0IHtcclxuICAgIGNvbnN0cnVjdG9yKEl0ZW1Db25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIHRoaXMuSXRlbUNvbnN0cnVjdG9yID0gSXRlbUNvbnN0cnVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2J1Y2tldCA9IHt9XHJcbiAgICB9XHJcbiAgICBhZGQoaWQpIHtcclxuICAgICAgICBjb25zdCB7IEl0ZW1Db25zdHJ1Y3RvciB9ID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuX2J1Y2tldFtpZF0pIHRoaXMuX2J1Y2tldFtpZF0gPSBuZXcgSXRlbUNvbnN0cnVjdG9yKGlkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnVja2V0W2lkXVxyXG4gICAgfVxyXG4gICAgc2V0KGlkLCBpdGVtKXtcclxuICAgICAgICB0aGlzLl9idWNrZXRbaWRdID0gaXRlbTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnVja2V0W2lkXTtcclxuICAgIH1cclxuICAgIGdldChpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRbaWRdIHx8IHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiAoe30pLFxyXG4gICAgICAgICAgICBzZXQ6ICgpID0+ICh7IGdldDogKCkgPT4geyB9IH0pXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGxpc3QoZGVjYXkgPSAxMCAqIDEwMDApIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fYnVja2V0KS5tYXAoayA9PiB0aGlzLl9idWNrZXRba10pXHJcbiAgICAgICAgLy8gLmZpbHRlcihpID0+ICFkZWNheSB8fCAhaS5pc0RlY2F5ZWQoZGVjYXkpKVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBJdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMudG91Y2godHJ1ZSk7XHJcbiAgICB9XHJcbiAgICB0b3VjaChtb2RpZnkpIHtcclxuICAgICAgICB0aGlzLl9qc29uID0gbW9kaWZ5ID8gdW5kZWZpbmVkIDogdGhpcy5fanNvbjtcclxuICAgICAgICB0aGlzLmxhc3RTZWVuID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobW9kaWZ5KSByZWZyZXNoT3B0aW9uc1BhZ2UoKTtcclxuICAgIH1cclxuICAgIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy50b3VjaCh0aGlzLmF0dHJpYnV0ZXNba2V5XSAhPT0gdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEZWNheWVkKGRlY2F5KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgaWYgKGRlY2F5ICYmICgodGhpcy5sYXN0U2VlbiArIGRlY2F5KSA8IERhdGUubm93KCkpKSByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGpzb24oKSB7XHJcbiAgICAgICAgdGhpcy5fanNvbiA9IHRoaXMuX2pzb24gfHwgdGhpcy5nZXQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fanNvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6dGhpcy5pZCxcclxuICAgICAgICAgICAgLi4udGhpcy5hdHRyaWJ1dGVzXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgVGFiRnJhbWUgZXh0ZW5kcyBJdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKHRhYkZyYW1lSWQpIHtcclxuICAgICAgICBzdXBlcih0YWJGcmFtZUlkKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEJ1Y2tldChUYWJGcmFtZSlcclxuICAgICAgICB0aGlzLnNldChcImxpc3RlbmVyc1wiLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2hpbGQoY2hpbGQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5zZXQoY2hpbGQuaWQsY2hpbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aW5kb3dJZCgpe1xyXG4gICAgICAgIHJldHVybiB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLmdldCh0aGlzLmlkKS5pZFxyXG4gICAgfVxyXG5cclxuICAgIGdldCBtZXNzYWdlcyAoKXtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZUJ5VGFiRnJhbWVJZC5nZXQodGhpcy5pZCkubWVzc2FnZXMgfHwge1xyXG4gICAgICAgICAgICBtZXNzYWdlczogW10sXHJcbiAgICAgICAgICAgIHNlbnQ6MCxcclxuICAgICAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgICAgIHJlY2VpdmVkOjBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCAoKSB7XHJcbiAgICAgICAgY29uc3Qge2NoaWxkcmVuLGlkfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIuZ2V0KCksXHJcbiAgICAgICAgICAgIC4uLndpbmRvd3NCeVRhYkFuZEZyYW1lSWQuZ2V0KGlkKS5nZXQoKSxcclxuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLmxpc3QoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgTWVzc2FnZXNCdWNrZXQgZXh0ZW5kcyBJdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKHdpbmRvd0lkKSB7XHJcbiAgICAgICAgc3VwZXIod2luZG93SWQpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcclxuICAgICAgICAgICAgc2VudDowLFxyXG4gICAgICAgICAgICBjb3VudDogMCxcclxuICAgICAgICAgICAgcmVjZWl2ZWQ6MFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgYWRkTWVzc2FnZShtZXNzYWdlSWQsY291bnRlcikge1xyXG4gICAgICAgIGlmKHRoaXMubWVzc2FnZXMubWVzc2FnZXMuaW5kZXhPZihtZXNzYWdlSWQpICE9PSAtMSkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlc1tjb3VudGVyXSsrO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXMuY291bnQrKztcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLm1lc3NhZ2VzLnVuc2hpZnQobWVzc2FnZUlkKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcy5tZXNzYWdlcy5zbGljZSgwLCAxMDApOy8vdG8gYXZvaWQgZGVuaWFsIG9mIHNlcnZpY2VcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLm1lc3NhZ2VzID0gQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzLm1lc3NhZ2VzKVxyXG4gICAgICAgIHRoaXMudG91Y2godHJ1ZSlcclxuICAgICAgICByZWZyZXNoT3B0aW9uc1BhZ2UoKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMubWVzc2FnZXMsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogdGhpcy5tZXNzYWdlcy5tYXAobT0+bWVzc2FnZXNCeU1lc3NhZ2VJZC5nZXQobSkuZ2V0KCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbndpbmRvd3NCeVRhYkFuZEZyYW1lSWQgPSBuZXcgQnVja2V0KFRhYkZyYW1lKTtcclxubWVzc2FnZXNCeU1lc3NhZ2VJZCAgPSBuZXcgQnVja2V0KEl0ZW0pO1xyXG5tZXNzYWdlQnlUYWJGcmFtZUlkICA9IG5ldyBCdWNrZXQoTWVzc2FnZXNCdWNrZXQpO1xyXG5cclxudGFic0ZyYW1lcyA9IG5ldyBCdWNrZXQoVGFiRnJhbWUpO1xyXG5cclxuY29uc3QgcmVjZWl2ZWRNZXNzYWdlID0gKHsgbWVzc2FnZUlkLCBkYXRhLCBvcmlnaW4gfSx0YWJJZCwgZnJhbWVJZCkgPT4ge1xyXG4gICAgbGV0IHRhYldpbmRvd0lkID0gYCR7dGFiSWR9Ojoke2ZyYW1lSWR9YDtcclxuICAgIG1lc3NhZ2VCeVRhYkZyYW1lSWQuYWRkKHRhYldpbmRvd0lkKVxyXG4gICAgICAgIC5hZGRNZXNzYWdlKG1lc3NhZ2VJZCxcInJlY2VpdmVkXCIpXHJcbiAgICBcclxuICAgIG1lc3NhZ2VzQnlNZXNzYWdlSWQuYWRkKG1lc3NhZ2VJZClcclxuICAgICAgICAuc2V0KFwicmVjZWl2ZXJcIiwgdGFiV2luZG93SWQpXHJcbiAgICAgICAgLnNldChcIm9yaWdpblwiLG9yaWdpbilcclxuICAgICAgICAuc2V0KFwiZGF0YVwiLCBkYXRhKTtcclxufVxyXG5cclxuY29uc3QgYWNjb3VudEZvck1lc3NhZ2UgPSAoeyBtZXNzYWdlSWQgfSx0YWJJZCwgZnJhbWVJZCkgPT4ge1xyXG4gICAgbGV0IHRhYldpbmRvd0lkID0gYCR7dGFiSWR9Ojoke2ZyYW1lSWR9YDtcclxuICAgIG1lc3NhZ2VCeVRhYkZyYW1lSWQuYWRkKHRhYldpbmRvd0lkKVxyXG4gICAgICAgIC5hZGRNZXNzYWdlKG1lc3NhZ2VJZCxcInNlbnRcIilcclxuICAgIFxyXG4gICAgbWVzc2FnZXNCeU1lc3NhZ2VJZC5hZGQobWVzc2FnZUlkKVxyXG4gICAgICAgIC5zZXQoXCJzZW5kZXJcIiwgdGFiV2luZG93SWQpO1xyXG59XHJcblxyXG5jb25zdCBsaXN0ZW5lcnMgPSAobWVzc2FnZSwgdGFiSWQsIGZyYW1lSWQpID0+IHtcclxuICAgIGNvbnN0IHsgbGlzdGVuZXJzLCB3aW5kb3dJZCAgfSA9IG1lc3NhZ2U7XHJcbiAgICB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLmFkZChgJHt0YWJJZH06OiR7ZnJhbWVJZH1gKS5zZXQoXCJsaXN0ZW5lcnNcIixsaXN0ZW5lcnMpLnNldChcIndpbmRvd0lkXCIsIHdpbmRvd0lkKVxyXG59XHJcblxyXG5jb25zdCB0b3BpY0hhbmRsZXJzID0ge1xyXG4gICAgXCJyZWNlaXZlZC1tZXNzYWdlXCI6cmVjZWl2ZWRNZXNzYWdlLFxyXG4gICAgXCJhY2NvdW50LWZvci1tZXNzYWdlXCI6YWNjb3VudEZvck1lc3NhZ2UsXHJcbiAgICBsaXN0ZW5lcnMsXHJcbiAgICBcImFjY291bnQtZm9yLXBhdGhcIjogKG1lc3NhZ2UsIHRhYklkLCBmcmFtZUlkKT0+e1xyXG4gICAgICAgIGxldCB0YWJXaW5kb3dJZCA9IGAke3RhYklkfTo6JHtmcmFtZUlkfWA7XHJcbiAgICAgICAgbGV0IHtwYXRofSA9bWVzc2FnZTtcclxuICAgICAgICB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLmFkZCh0YWJXaW5kb3dJZCkuc2V0KFwicGF0aFwiLHBhdGgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY29uc3QgcHJvY2Vzc0luY29taW5nTWVzc2FnZSA9IChtZXNzYWdlLCB0YWJJZCxmcmFtZUlkKSA9PiB7XHJcbiAgICBsZXQgeyB0b3BpYyB9ID0gbWVzc2FnZTtcclxuICAgIGlmICghdG9waWNIYW5kbGVyc1t0b3BpY10pIHJldHVybiBjb25zb2xlLmxvZyhgVE9ETzogaGFuZGVsICR7dG9waWN9IGZyb20gJHt0YWJJZH06JHtmcmFtZUlkfWApXHJcbiAgICB0b3BpY0hhbmRsZXJzW3RvcGljXShtZXNzYWdlLCB0YWJJZCxmcmFtZUlkKVxyXG59XHJcblxyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgcmVzcG9uc2UpID0+IHtcclxuICAgIGNvbnN0IHsgXHJcbiAgICAgICAgZnJhbWVJZCxcclxuICAgICAgICB0YWI6IHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICB9IH0gPSBzZW5kZXJcclxuXHJcbiAgICBpZiAoIW1lc3NhZ2UpIGNvbnNvbGUudHJhY2UoXCJlbXB0eSBtZXNzYWdlXCIpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBwcm9jZXNzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UsIGlkLCBmcmFtZUlkKVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgIH1cclxufSlcclxuXHJcblxyXG5cclxuY29uc3QgdXBkYXRlVGFicyA9ICgpID0+IHtcclxuICAgIGNocm9tZS50YWJzLnF1ZXJ5KHt9LCAoYWxsVGFicykgPT4ge1xyXG4gICAgICAgIGxldCB0YXJnZXRUYWJzID0gYWxsVGFicy5maWx0ZXIoKHsgdXJsIH0pID0+ICF1cmwuc3RhcnRzV2l0aChcImNocm9tZVwiKSk7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgICAgIHRhcmdldFRhYnMubWFwKCh7IGlkOiB0YWJJZCB9KSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjaHJvbWUud2ViTmF2aWdhdGlvbi5nZXRBbGxGcmFtZXMoeyB0YWJJZCB9LCAoZnJhbWVzKSA9PiByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJJZCxcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZXNcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9KSlcclxuXHJcbiAgICAgICAgKS50aGVuKCh1cGRhdGVkVGFicykgPT4ge1xyXG4gICAgICAgICAgICB0YWJzRnJhbWVzID0gbmV3IEJ1Y2tldChUYWJGcmFtZSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZWRUYWJzLmZvckVhY2goKHsgdGFiSWQsIGZyYW1lcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9wRnJhbWVJbmRleCA9IGZyYW1lcy5maW5kSW5kZXgoKHtwYXJlbnRGcmFtZUlkfSk9PnBhcmVudEZyYW1lSWQ9PT0tMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHRvcEZyYW1lSW5kZXgpPT09XCJ1bmRlZmluZWRcIikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgbGV0IFt7ZnJhbWVJZCx1cmx9XSA9IGZyYW1lcy5zcGxpY2UodG9wRnJhbWVJbmRleCwxKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJGcmFtZUlkID0gYCR7dGFiSWR9Ojoke2ZyYW1lSWR9YDtcclxuICAgICAgICAgICAgICAgIGxldCB0b3AgPSAgbmV3IFRhYkZyYW1lKHRhYkZyYW1lSWQpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0b3Auc2V0KFwibG9jYXRpb25IcmVmXCIsIHVybCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLnNldCh0YWJGcmFtZUlkLHRvcCk7XHJcbiAgICAgICAgICAgICAgICB0YWJzRnJhbWVzLnNldCh0YWJGcmFtZUlkLCB0b3ApXHJcbiAgICAgICAgICAgICAgICBmcmFtZXMuZm9yRWFjaChmcmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRGcmFtZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxcclxuICAgICAgICAgICAgICAgICAgICB9ID0gZnJhbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYkZyYW1lSWQgPSBgJHt0YWJJZH06OiR7ZnJhbWVJZH1gO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRUYWJGcmFtZUlkID0gYCR7dGFiSWR9Ojoke3BhcmVudEZyYW1lSWR9YDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgd2luZG93RnJhbWUgPSB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLmFkZCh0YWJGcmFtZUlkKS5zZXQoXCJsb2NhdGlvbkhyZWZcIiwgdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50V2luZG93RnJhbWUgPSB3aW5kb3dzQnlUYWJBbmRGcmFtZUlkLmFkZChwYXJlbnRUYWJGcmFtZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRXaW5kb3dGcmFtZS5hZGRDaGlsZCh3aW5kb3dGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59XHJcblxyXG5jaHJvbWUud2ViTmF2aWdhdGlvbi5vbkRPTUNvbnRlbnRMb2FkZWQuYWRkTGlzdGVuZXIodXBkYXRlVGFicylcclxuY2hyb21lLndlYk5hdmlnYXRpb24ub25Db21taXR0ZWQuYWRkTGlzdGVuZXIodXBkYXRlVGFicykiXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlUm9vdCI6IiJ9